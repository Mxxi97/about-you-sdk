// This file is auto-generated by @hey-api/openapi-ts

/**
 * WebhookEventSchema
 */
export type WebhookEventSchema = {
    /**
     * Description
     */
    description: string;
    /**
     * Event
     */
    event: string;
};

/**
 * BadRequestSchema
 */
export type BadRequestSchema = {
    /**
     * Message
     * Error message
     */
    message: string;
};

/**
 * EventType
 */
export type EventType = 'order.created' | 'order.cancelled' | 'order.shipped' | 'order.returned';

/**
 * WebhookSubscriptionSchema
 */
export type WebhookSubscriptionSchema = {
    /**
     * Events
     */
    events: Array<EventType>;
    /**
     * Url
     */
    url: string;
    /**
     * ID
     */
    id?: number | null;
    /**
     * Description
     * An optional description of what the webhook is used for.
     */
    description?: string | null;
    /**
     * Enabled
     * User side activation toggle
     */
    enabled?: boolean;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * SecretWebhookSubscriptionSchema
 */
export type SecretWebhookSubscriptionSchema = {
    /**
     * Events
     */
    events: Array<EventType>;
    /**
     * Url
     */
    url: string;
    /**
     * ID
     */
    id?: number | null;
    /**
     * Description
     * An optional description of what the webhook is used for.
     */
    description?: string | null;
    /**
     * Enabled
     * User side activation toggle
     */
    enabled?: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Client Secret
     */
    client_secret: string;
};

/**
 * WebhookSubscriptionPostSchema
 */
export type WebhookSubscriptionPostSchema = {
    /**
     * Events
     */
    events: Array<EventType>;
    /**
     * Url
     */
    url: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * WebhookSubscriptionPatchSchemaPatch
 */
export type WebhookSubscriptionPatchSchemaPatch = {
    /**
     * Events
     */
    events?: Array<EventType> | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Enabled
     */
    enabled?: boolean | null;
};

/**
 * GetOrderSchema
 */
export type GetOrderSchema = {
    /**
     * Order items
     * List of order items
     */
    order_items: Array<OrderItemSchema>;
    /**
     * Order number
     * Order number of the order
     */
    order_number: string;
    /**
     * Delivery Document Url
     */
    delivery_document_url: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Customer Key
     * Reference key of the customer (MAPI: customer_key)
     */
    customer_key: string;
    /**
     * Custom Data
     * Custom data (MAPI: customData)
     */
    custom_data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Shop
     */
    shop: number;
    /**
     * Carrier Key
     * Carrier key
     */
    carrier_key: string;
    /**
     * Payment Method
     * Payment method
     */
    payment_method?: string | null;
    /**
     * Billing Street
     * Billing address
     */
    billing_street: string;
    /**
     * Billing Zip Code
     * Billing zip code
     */
    billing_zip_code: string;
    /**
     * Billing City
     * Billing city
     */
    billing_city: string;
    /**
     * Billing Country Code
     * Billing country code
     */
    billing_country_code: string;
    /**
     * Billing Recipient Gender
     * Gender of the recipient
     */
    billing_recipient_gender?: string | null;
    /**
     * Billing Recipient First Name
     * First name of the recipient
     */
    billing_recipient_first_name: string;
    /**
     * Billing Recipient Last Name
     * Last name of the recipient
     */
    billing_recipient_last_name: string;
    /**
     * Billing Additional
     * Additional billing information
     */
    billing_additional?: string | null;
    /**
     * Shipping Street
     * Shipping address
     */
    shipping_street?: string | null;
    /**
     * Shipping Zip Code
     * Shipping zip code
     */
    shipping_zip_code?: string | null;
    /**
     * Shipping City
     * Shipping city
     */
    shipping_city?: string | null;
    /**
     * Shipping Country Code
     * Shipping country
     */
    shipping_country_code?: string | null;
    /**
     * Shipping Additional
     * Additional shipping information
     */
    shipping_additional?: string | null;
    /**
     * Shipping Collection Point Key
     * Shipping collection point key
     */
    shipping_collection_point_key?: string | null;
    /**
     * Shipping Collection Point Type
     * Shipping collection point type
     */
    shipping_collection_point_type?: string | null;
    /**
     * Shipping Collection Point Customer Key
     * Shipping collection point customer key
     */
    shipping_collection_point_customer_key?: string | null;
    /**
     * Shipping Collection Point Description
     * Shipping collection point description
     */
    shipping_collection_point_description?: string | null;
    /**
     * Shipping Recipient Gender
     * Gender of the recipient
     */
    shipping_recipient_gender?: string | null;
    /**
     * Shipping Recipient First Name
     * First name of the recipient
     */
    shipping_recipient_first_name: string;
    /**
     * Shipping Recipient Last Name
     * Last name of the recipient
     */
    shipping_recipient_last_name: string;
    /**
     * Currency Code
     * Currency code
     */
    currency_code: string;
    /**
     * Cost Without Tax
     * Cost of the order without tax in the smallest currency unit (e.g. cents for Euro)
     */
    cost_without_tax: number;
    /**
     * Cost With Tax
     * Cost of the order with tax in the smallest currency unit (e.g. cents for Euro)
     */
    cost_with_tax: number;
    /**
     * Shopify Order Id
     * Shopify Order ID
     */
    shopify_order_id?: string | null;
    /**
     * Status
     */
    status?: string;
    /**
     * Fulfillment Type
     * Fulfillment type
     */
    fulfillment_type?: string;
};

/**
 * OrderCreatedWebhookSchema
 */
export type OrderCreatedWebhookSchema = {
    /**
     * Id
     * ID of the webhook message
     */
    id: number;
    /**
     * Event
     * Event type of webhook message
     */
    event: 'order.created';
    /**
     * Timestamp
     * UTC timestamp when the event was created
     */
    timestamp?: string;
    /**
     * Order payload of the triggered event
     */
    message: GetOrderSchema;
    /**
     * Subscription Id
     * ID of the subscription
     */
    subscription_id?: number | null;
};

/**
 * OrderItemSchema
 */
export type OrderItemSchema = {
    /**
     * Return Tracking Key
     */
    return_tracking_key: string | null;
    /**
     * Shipment Tracking Key
     */
    shipment_tracking_key: string | null;
    /**
     * SKU
     * SKU of the product variant
     */
    sku: string;
    /**
     * ID
     */
    id?: number | null;
    /**
     * Product Variant
     */
    product_variant: number;
    /**
     * Vat
     * The tax percentage
     */
    vat?: number;
    /**
     * Price Without Tax
     * Price of the product excluding tax in the smallest currency unit (e.g. cents for Euro)
     */
    price_without_tax: number;
    /**
     * Price With Tax
     * Price of the product including tax in the smallest currency unit (e.g. cents for Euro)
     */
    price_with_tax: number;
    /**
     * Custom Data
     * Custom data for the order item
     */
    custom_data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Status
     */
    status?: string;
};

/**
 * OrderCancelledWebhookSchema
 */
export type OrderCancelledWebhookSchema = {
    /**
     * Id
     * ID of the webhook message
     */
    id: number;
    /**
     * Event
     * Event type of webhook message
     */
    event: 'order.cancelled';
    /**
     * Timestamp
     * UTC timestamp when the event was created
     */
    timestamp?: string;
    /**
     * Order payload of the triggered event
     */
    message: GetOrderSchema;
    /**
     * Subscription Id
     * ID of the subscription
     */
    subscription_id?: number | null;
};

/**
 * OrderShippedWebhookSchema
 */
export type OrderShippedWebhookSchema = {
    /**
     * Id
     * ID of the webhook message
     */
    id: number;
    /**
     * Event
     * Event type of webhook message
     */
    event: 'order.shipped';
    /**
     * Timestamp
     * UTC timestamp when the event was created
     */
    timestamp?: string;
    /**
     * Order payload of the triggered event
     */
    message: GetOrderSchema;
    /**
     * Subscription Id
     * ID of the subscription
     */
    subscription_id?: number | null;
};

/**
 * OrderReturnedWebhookSchema
 */
export type OrderReturnedWebhookSchema = {
    /**
     * Id
     * ID of the webhook message
     */
    id: number;
    /**
     * Event
     * Event type of webhook message
     */
    event: 'order.returned';
    /**
     * Timestamp
     * UTC timestamp when the event was created
     */
    timestamp?: string;
    /**
     * Order payload of the triggered event
     */
    message: GetOrderSchema;
    /**
     * Subscription Id
     * ID of the subscription
     */
    subscription_id?: number | null;
};

/**
 * GetProductsParams
 */
export type GetProductsParams = {
    /**
     * Style Key
     * Style key to search for
     */
    style_key?: string | null;
    /**
     * SKU
     * SKU to search for
     */
    sku?: string | null;
    /**
     * Status
     * Status of the product to filter by. Choose from: "draft", "pending_approval", "rejected", "pending_active", "active", "inactive", "archived".
     */
    status?: Status | null;
};

/**
 * Input
 * Schema for pagination input parameters.
 *
 * Attributes:
 * page (int): The page number to retrieve items from (default: 1, must be ≥ 1).
 * per_page (int): The number of items per page (default: 20, must be between 1 and 100).
 */
export type Input = {
    /**
     * Page
     * Page number to retrieve items from
     */
    page?: number;
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number;
};

/**
 * Status
 */
export type Status = 'pending' | 'processing' | 'completed' | 'failed';

/**
 * GetProductItemSchema
 */
export type GetProductItemSchema = {
    /**
     * Style Key
     */
    style_key: string | null;
    /**
     * Status
     */
    status: string | null;
    /**
     * Sku
     */
    sku: string;
    /**
     * Ean
     */
    ean: string | null;
    /**
     * Hs Code
     */
    hs_code: string | null;
    /**
     * Name
     */
    name: string | null;
    /**
     * Description
     */
    description: string | null;
    /**
     * Color
     */
    color: number | null;
    /**
     * Size
     */
    size: number | null;
    /**
     * Second Size
     */
    second_size: number | null;
    /**
     * Brand
     */
    brand: number;
    /**
     * Category
     */
    category: number;
    /**
     * Quantity
     */
    quantity: number | null;
    /**
     * Weight
     */
    weight: number | null;
    /**
     * Countries
     */
    countries: Array<string>;
    /**
     * Country Of Origin
     */
    country_of_origin: string | null;
    /**
     * Attributes
     */
    attributes: Array<number>;
    /**
     * Material Composition Textile
     */
    material_composition_textile?: Array<MaterialCompositionTextileSchema> | null;
    /**
     * Material Composition Non Textile
     */
    material_composition_non_textile?: Array<MaterialCompositionNonTextileSchema> | null;
    /**
     * Prices
     */
    prices: Array<PriceSchema>;
    /**
     * Images
     */
    images: Array<string>;
};

/**
 * GetProductsResponseSchema
 */
export type GetProductsResponseSchema = {
    /**
     * Items
     */
    items: Array<GetProductItemSchema>;
    pagination: Pagination;
};

/**
 * MaterialCompositionNonTextileSchema
 */
export type MaterialCompositionNonTextileSchema = {
    /**
     * Cluster Id
     * ID (integer) of this property
     */
    cluster_id: number;
    /**
     * Components
     */
    components: Array<NonTextileMaterialSchema>;
};

/**
 * MaterialCompositionTextileSchema
 */
export type MaterialCompositionTextileSchema = {
    /**
     * Cluster Id
     * ID (integer) of this property
     */
    cluster_id: number;
    /**
     * Components
     */
    components: Array<TextileMaterialSchema>;
};

/**
 * NonTextileMaterialSchema
 */
export type NonTextileMaterialSchema = {
    /**
     * Material Id
     * ID (integer) of this property
     */
    material_id: number;
};

/**
 * Pagination
 */
export type Pagination = {
    /**
     * Per Page
     */
    per_page: number;
    /**
     * Page
     */
    page: number;
    /**
     * Pages
     */
    pages: number;
    /**
     * Total
     */
    total: number;
    /**
     * Next
     */
    next: string | null;
    /**
     * Prev
     */
    prev: string | null;
};

/**
 * PriceSchema
 */
export type PriceSchema = {
    /**
     * Country Code
     * ISO 3166-1 alpha-2 country code
     */
    country_code: string;
    /**
     * Retail Price
     */
    retail_price: number;
    /**
     * Sale Price
     */
    sale_price?: number | null;
};

/**
 * TextileMaterialSchema
 */
export type TextileMaterialSchema = {
    /**
     * Material Id
     * ID (integer) of this property
     */
    material_id: number;
    /**
     * Fraction
     * Fraction of the material in the composition in percentage.
     */
    fraction: number;
};

/**
 * BatchRequestResponseSchema
 */
export type BatchRequestResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
};

/**
 * UpsertProductItemSchema
 */
export type UpsertProductItemSchema = {
    /**
     * Style Key
     * Unique style key for the product.
     */
    style_key: string;
    /**
     * Sku
     */
    sku: string;
    /**
     * Ean
     */
    ean?: string | null;
    /**
     * Hs Code
     */
    hs_code: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     * Provide a detailed description of the product in German. Maximum 2500 characters.
     */
    description: string;
    /**
     * Color
     * ID (integer) of this property
     */
    color: number;
    /**
     * Size
     */
    size: number | null;
    /**
     * Second Size
     */
    second_size?: number | null;
    /**
     * Brand
     * ID (integer) of this property
     */
    brand: number;
    /**
     * Category
     * ID (integer) of this property
     */
    category: number;
    /**
     * Quantity
     * Quantity of the product variant.
     */
    quantity: number;
    /**
     * Weight
     * Weight of the product in grams.
     */
    weight: number;
    /**
     * Countries
     */
    countries: Array<string>;
    /**
     * Country Of Origin
     * ISO 3166-1 alpha-2 country code
     */
    country_of_origin: string;
    /**
     * Attributes
     */
    attributes: Array<number>;
    /**
     * Material Composition Textile
     */
    material_composition_textile?: Array<MaterialCompositionTextileSchema> | null;
    /**
     * Material Composition Non Textile
     */
    material_composition_non_textile?: Array<MaterialCompositionNonTextileSchema> | null;
    /**
     * Prices
     */
    prices: Array<PriceSchema>;
    /**
     * Images
     */
    images: Array<string>;
};

/**
 * UpsertProductSchema
 */
export type UpsertProductSchema = {
    /**
     * Items
     * List of product variants to upsert.
     */
    items: Array<UpsertProductItemSchema>;
};

/**
 * UpdateProductStatusResponseSchema
 */
export type UpdateProductStatusResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
};

/**
 * ProductStatusChoices
 */
export type ProductStatusChoices = 'published' | 'inactive' | 'draft';

/**
 * UpdateProductStatusItemSchema
 */
export type UpdateProductStatusItemSchema = {
    /**
     * Style Key
     * Style key for the group of products
     */
    style_key: string;
    /**
     * Status you want to set for the given product
     */
    status: ProductStatusChoices;
};

/**
 * UpdateProductStatusSchema
 */
export type UpdateProductStatusSchema = {
    /**
     * Items
     * List of style_keys and corresponding status to update.
     */
    items: Array<UpdateProductStatusItemSchema>;
};

/**
 * UpdateStockResponseSchema
 */
export type UpdateStockResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
};

/**
 * UpdateStockItemSchema
 */
export type UpdateStockItemSchema = {
    /**
     * Sku
     * Stock Keeping Unit identifier
     */
    sku: string;
    /**
     * Quantity
     * Quantity to update
     */
    quantity: number;
};

/**
 * UpdateStockSchema
 */
export type UpdateStockSchema = {
    /**
     * Items
     * List of stock items to update
     */
    items: Array<UpdateStockItemSchema>;
};

/**
 * UpdatePriceResponseSchema
 */
export type UpdatePriceResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
};

/**
 * UpdatePriceItemSchema
 */
export type UpdatePriceItemSchema = {
    /**
     * Sku
     * Stock Keeping Unit identifier
     */
    sku: string;
    price: PriceSchema;
};

/**
 * UpdatePriceSchema
 */
export type UpdatePriceSchema = {
    /**
     * Items
     * List of price items to update
     */
    items: Array<UpdatePriceItemSchema>;
};

/**
 * ListCategoriesParams
 */
export type ListCategoriesParams = {
    /**
     * Query
     * Search term to filter items by path name
     */
    query?: string | null;
    /**
     * Parent Category
     * Filter items by parent category ID
     */
    parent_category?: number | null;
};

/**
 * CategorySchema
 */
export type CategorySchema = {
    /**
     * Id
     * ID (integer) of this property
     */
    id: number;
    /**
     * Name
     * Name of the category
     */
    name: string;
    /**
     * Path
     * Path of the category for display purposes
     */
    path: string;
    /**
     * Parent Id
     * ID of the parent category or null if it's a root category
     */
    parent_id?: number | null;
    /**
     * Parent
     */
    parent?: number | null;
};

/**
 * GetCategoriesResponseSchema
 */
export type GetCategoriesResponseSchema = {
    /**
     * Items
     */
    items: Array<CategorySchema>;
    pagination: Pagination;
};

/**
 * AttributeGroupSchema
 */
export type AttributeGroupSchema = {
    /**
     * Attributes
     */
    attributes: Array<AttributeSchema>;
    /**
     * Id
     * ID (integer) of this property
     */
    id: number;
    /**
     * Name
     * Name of the attribute group
     */
    name: string;
    /**
     * Frontend Name
     * Name of the attribute group for display purposes
     */
    frontend_name: string;
    /**
     * Is Multiselect
     * Whether the group allows multiple attributes to be selected
     */
    is_multiselect?: boolean | null;
};

/**
 * AttributeSchema
 */
export type AttributeSchema = {
    /**
     * Id
     * ID (integer) of this property
     */
    id: number;
    /**
     * Name
     * Name of the attribute
     */
    name: string;
    /**
     * Frontend Name
     * Name of the attribute for display purposes
     */
    frontend_name: string;
};

/**
 * UpsertProductBatchResultsResponseSchema
 */
export type UpsertProductBatchResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     */
    items: Array<UpsertProductResultItemSchema>;
};

/**
 * UpsertProductResultItemSchema
 */
export type UpsertProductResultItemSchema = {
    requestItem: UpsertProductItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * UpdateProductStatusBatchResultsResponseSchema
 */
export type UpdateProductStatusBatchResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status
     */
    status: Status | string;
    /**
     * Items
     */
    items: Array<UpdateProductStatusResultItemSchema>;
};

/**
 * UpdateProductStatusResultItemSchema
 */
export type UpdateProductStatusResultItemSchema = {
    requestItem: UpdateProductStatusItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * StockBatchResultsResponseSchema
 */
export type StockBatchResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     * List of result items for stock update
     */
    items: Array<UpdateStockResultItemSchema>;
};

/**
 * UpdateStockResultItemSchema
 */
export type UpdateStockResultItemSchema = {
    requestItem: UpdateStockItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * PriceBatchResultsResponseSchema
 */
export type PriceBatchResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     * List of result items for batch update
     */
    items: Array<UpdatePriceResultItemSchema>;
};

/**
 * UpdatePriceResultItemSchema
 */
export type UpdatePriceResultItemSchema = {
    requestItem: UpdatePriceItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * CancelOrderItemSchema
 */
export type CancelOrderItemSchema = {
    /**
     * Id
     * Order item ID to cancel.
     */
    id: number;
};

/**
 * CancelOrderResultItemSchema
 */
export type CancelOrderResultItemSchema = {
    requestItem: CancelOrderItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * CancelOrderResultsResponseSchema
 */
export type CancelOrderResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     * List of result items for batch cancel order
     */
    items: Array<CancelOrderResultItemSchema>;
};

/**
 * ReturnItemSchema
 */
export type ReturnItemSchema = {
    /**
     * Order Items
     * List of order item ids to return.
     */
    order_items: Array<number>;
    /**
     * Return Tracking Key
     * Return tracking key
     */
    return_tracking_key: string;
};

/**
 * ReturnResultItemSchema
 */
export type ReturnResultItemSchema = {
    requestItem: ReturnItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * ReturnResultsSchema
 */
export type ReturnResultsSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     * List of result items for batch return order
     */
    items: Array<ReturnResultItemSchema>;
};

/**
 * Carrier
 */
export type Carrier = 'DHL_STD_NATIONAL' | 'HERMES_KLV' | 'HERMES_STD_NATIONAL' | 'DHL_AUT' | 'DHL_POST_AUT' | 'HERMES_POST_AUT' | 'POST_CH' | 'QUICK_CH' | 'POST_NL' | 'DHL_NL' | 'DHL_PL' | 'PPL' | 'ZASIL_CZ' | 'BPOST_BE' | 'DHL_BPOST_BEL' | 'COLI_FR' | 'UB_GLS_DK' | 'UB_CORR_ES' | 'DS_TB_ES' | 'UB_CTT_PT' | 'DS_TB_PT' | 'ECONT_BG' | 'ACS_CY' | 'UB_OMNIVA_EE' | 'UB_POST_FI' | 'UB_TAXY_GR' | 'ACS_GR' | 'POST_HR' | 'POST_HU' | 'GLS_HU' | 'UB_FAST_IE' | 'POST_IT' | 'DS_TB_IT' | 'UB_OMNIVA_LT' | 'BPOST_LU' | 'UB_OMNIVA_LV' | 'UB_POST_NO' | 'FAN_RO' | 'UB_DHL_SE' | 'POST_SI' | 'POST_SK' | 'ZASIL_SK';

/**
 * ShipmentItemSchema
 */
export type ShipmentItemSchema = {
    /**
     * Order Items
     * List of order item ids to ship.
     */
    order_items: Array<number>;
    /**
     * Carrier of the shipment
     */
    carrier_key: Carrier;
    /**
     * Shipment Tracking Key
     * Tracking key of the shipment
     */
    shipment_tracking_key: string;
    /**
     * Return Tracking Key
     * Return tracking key
     */
    return_tracking_key: string;
};

/**
 * ShipmentOrderResultsResponseSchema
 */
export type ShipmentOrderResultsResponseSchema = {
    /**
     * Batchrequestid
     * Unique identifier (UUID)
     */
    batchRequestId: string;
    /**
     * Status of the batch processing
     */
    status: Status;
    /**
     * Items
     * List of result items for batch shipment order
     */
    items: Array<ShipmentResultItemSchema>;
};

/**
 * ShipmentResultItemSchema
 */
export type ShipmentResultItemSchema = {
    requestItem: ShipmentItemSchema;
    /**
     * Success
     */
    success: boolean;
    /**
     * Errors
     */
    errors: Array<string>;
};

/**
 * GetOrderParams
 */
export type GetOrderParams = {
    /**
     * Order number
     * Order number to search for
     */
    order_number?: string | null;
    /**
     * Customer key
     * Customer key to search for
     */
    customer_key?: string | null;
    /**
     * Carrier Key
     * Carrier of the order to filter by. Choose from: "DHL_STD_NATIONAL", "HERMES_KLV", "HERMES_STD_NATIONAL", "DHL_AUT", "DHL_POST_AUT", "HERMES_POST_AUT", "POST_CH", "QUICK_CH", "POST_NL", "DHL_NL", "DHL_PL", "PPL", "ZASIL_CZ", "BPOST_BE", "DHL_BPOST_BEL", "COLI_FR", "UB_GLS_DK", "UB_CORR_ES", "DS_TB_ES", "UB_CTT_PT", "DS_TB_PT", "ECONT_BG", "ACS_CY", "UB_OMNIVA_EE", "UB_POST_FI", "UB_TAXY_GR", "ACS_GR", "POST_HR", "POST_HU", "GLS_HU", "UB_FAST_IE", "POST_IT", "DS_TB_IT", "UB_OMNIVA_LT", "BPOST_LU", "UB_OMNIVA_LV", "UB_POST_NO", "FAN_RO", "UB_DHL_SE", "POST_SI", "POST_SK", "ZASIL_SK".
     */
    carrier_key?: Carrier | null;
    /**
     * Shop country
     * Shop country to search for
     */
    shop_country?: string | null;
    /**
     * Status
     * Status of the order to filter by. Choose from: "open", "shipped", "cancelled", "returned", "mixed".
     */
    order_status?: OrdersAppModelsOrderOrderStatusChoices | null;
    /**
     * Status of the order item to filter by. Choose from: "open", "shipped", "cancelled", "returned".
     */
    order_item_status?: OrdersAppModelsOrderItemOrderItemStatusChoices | null;
    /**
     * Orders from
     * Orders from date to filter by
     */
    orders_from?: string | null;
    /**
     * Orders to
     * Orders to date to filter by
     */
    orders_to?: string | null;
};

/**
 * StatusChoices
 */
export type OrdersAppModelsOrderOrderStatusChoices = 'open' | 'shipped' | 'cancelled' | 'returned' | 'mixed';

/**
 * StatusChoices
 */
export type OrdersAppModelsOrderItemOrderItemStatusChoices = 'open' | 'shipped' | 'cancelled' | 'returned';

/**
 * PagedGetOrderSchema
 */
export type PagedGetOrderSchema = {
    /**
     * Items
     */
    items: Array<GetOrderSchema>;
    pagination: Pagination;
};

/**
 * CancelRequestSchema
 */
export type CancelRequestSchema = {
    /**
     * Items
     * List of order items to cancel.
     */
    items: Array<CancelOrderItemSchema>;
};

/**
 * ShipmentRequestSchema
 */
export type ShipmentRequestSchema = {
    /**
     * Items
     * List of shipments.
     */
    items: Array<ShipmentItemSchema>;
};

/**
 * ReturnRequestSchema
 */
export type ReturnRequestSchema = {
    /**
     * Items
     * List of return shipments.
     */
    items: Array<ReturnItemSchema>;
};

export type ScapiAppEndpointsWebhookApiGetWebhookEventTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/types';
};

export type ScapiAppEndpointsWebhookApiGetWebhookEventTypesErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiGetWebhookEventTypesError = ScapiAppEndpointsWebhookApiGetWebhookEventTypesErrors[keyof ScapiAppEndpointsWebhookApiGetWebhookEventTypesErrors];

export type ScapiAppEndpointsWebhookApiGetWebhookEventTypesResponses = {
    /**
     * Response
     * OK
     */
    200: Array<WebhookEventSchema>;
};

export type ScapiAppEndpointsWebhookApiGetWebhookEventTypesResponse = ScapiAppEndpointsWebhookApiGetWebhookEventTypesResponses[keyof ScapiAppEndpointsWebhookApiGetWebhookEventTypesResponses];

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/';
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsError = ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsErrors[keyof ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsErrors];

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsResponses = {
    /**
     * Response
     * OK
     */
    200: Array<WebhookSubscriptionSchema>;
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsResponse = ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsResponses[keyof ScapiAppEndpointsWebhookApiGetWebhookSubscriptionsResponses];

export type ScapiAppEndpointsWebhookApiPostWebhookSubscriptionData = {
    body: WebhookSubscriptionPostSchema;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/';
};

export type ScapiAppEndpointsWebhookApiPostWebhookSubscriptionErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiPostWebhookSubscriptionError = ScapiAppEndpointsWebhookApiPostWebhookSubscriptionErrors[keyof ScapiAppEndpointsWebhookApiPostWebhookSubscriptionErrors];

export type ScapiAppEndpointsWebhookApiPostWebhookSubscriptionResponses = {
    /**
     * OK
     */
    200: SecretWebhookSubscriptionSchema;
};

export type ScapiAppEndpointsWebhookApiPostWebhookSubscriptionResponse = ScapiAppEndpointsWebhookApiPostWebhookSubscriptionResponses[keyof ScapiAppEndpointsWebhookApiPostWebhookSubscriptionResponses];

export type ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionData = {
    body?: never;
    path: {
        /**
         * Subscription Id
         */
        subscription_id: number;
    };
    query?: never;
    url: '/api/v1/webhooks/{subscription_id}';
};

export type ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionError = ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionErrors[keyof ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionErrors];

export type ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionResponses = {
    /**
     * No Content
     */
    204: void;
};

export type ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionResponse = ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionResponses[keyof ScapiAppEndpointsWebhookApiDeleteWebhookSubscriptionResponses];

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionData = {
    body?: never;
    path: {
        /**
         * Subscription Id
         */
        subscription_id: number;
    };
    query?: never;
    url: '/api/v1/webhooks/{subscription_id}';
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionError = ScapiAppEndpointsWebhookApiGetWebhookSubscriptionErrors[keyof ScapiAppEndpointsWebhookApiGetWebhookSubscriptionErrors];

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionResponses = {
    /**
     * OK
     */
    200: WebhookSubscriptionSchema;
};

export type ScapiAppEndpointsWebhookApiGetWebhookSubscriptionResponse = ScapiAppEndpointsWebhookApiGetWebhookSubscriptionResponses[keyof ScapiAppEndpointsWebhookApiGetWebhookSubscriptionResponses];

export type ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchData = {
    body: WebhookSubscriptionPatchSchemaPatch;
    path: {
        /**
         * Subscription Id
         */
        subscription_id: number;
    };
    query?: never;
    url: '/api/v1/webhooks/{subscription_id}';
};

export type ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchError = ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchErrors[keyof ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchErrors];

export type ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchResponses = {
    /**
     * OK
     */
    200: WebhookSubscriptionSchema;
};

export type ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchResponse = ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchResponses[keyof ScapiAppEndpointsWebhookApiUpdateWebhookSubscriptionPatchResponses];

export type ScapiAppEndpointsWebhookApiOrderCreatedWebhookData = {
    body: OrderCreatedWebhookSchema;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/order-created';
};

export type ScapiAppEndpointsWebhookApiOrderCreatedWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ScapiAppEndpointsWebhookApiOrderCancelledWebhookData = {
    body: OrderCancelledWebhookSchema;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/order-cancelled';
};

export type ScapiAppEndpointsWebhookApiOrderCancelledWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ScapiAppEndpointsWebhookApiOrderShippedWebhookData = {
    body: OrderShippedWebhookSchema;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/order-shipped';
};

export type ScapiAppEndpointsWebhookApiOrderShippedWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ScapiAppEndpointsWebhookApiOrderReturnedWebhookData = {
    body: OrderReturnedWebhookSchema;
    path?: never;
    query?: never;
    url: '/api/v1/webhooks/order-returned';
};

export type ScapiAppEndpointsWebhookApiOrderReturnedWebhookResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ScapiAppEndpointsProductApiGetProductsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Style Key
         * Style key to search for
         */
        style_key?: string | null;
        /**
         * SKU
         * SKU to search for
         */
        sku?: string | null;
        /**
         * Status
         * Status of the product to filter by. Choose from: "draft", "pending_approval", "rejected", "pending_active", "active", "inactive", "archived".
         */
        status?: Status | null;
        /**
         * Page
         * Page number to retrieve items from
         */
        page?: number;
        /**
         * Per Page
         * Number of items per page
         */
        per_page?: number;
    };
    url: '/api/v1/products/';
};

export type ScapiAppEndpointsProductApiGetProductsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsProductApiGetProductsError = ScapiAppEndpointsProductApiGetProductsErrors[keyof ScapiAppEndpointsProductApiGetProductsErrors];

export type ScapiAppEndpointsProductApiGetProductsResponses = {
    /**
     * OK
     */
    200: GetProductsResponseSchema;
};

export type ScapiAppEndpointsProductApiGetProductsResponse = ScapiAppEndpointsProductApiGetProductsResponses[keyof ScapiAppEndpointsProductApiGetProductsResponses];

export type ScapiAppEndpointsProductApiUpsertProductData = {
    body: UpsertProductSchema;
    path?: never;
    query?: never;
    url: '/api/v1/products/';
};

export type ScapiAppEndpointsProductApiUpsertProductErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsProductApiUpsertProductError = ScapiAppEndpointsProductApiUpsertProductErrors[keyof ScapiAppEndpointsProductApiUpsertProductErrors];

export type ScapiAppEndpointsProductApiUpsertProductResponses = {
    /**
     * OK
     */
    200: BatchRequestResponseSchema;
};

export type ScapiAppEndpointsProductApiUpsertProductResponse = ScapiAppEndpointsProductApiUpsertProductResponses[keyof ScapiAppEndpointsProductApiUpsertProductResponses];

export type ScapiAppEndpointsProductApiUpdateProductStatusData = {
    body: UpdateProductStatusSchema;
    path?: never;
    query?: never;
    url: '/api/v1/products/status';
};

export type ScapiAppEndpointsProductApiUpdateProductStatusErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsProductApiUpdateProductStatusError = ScapiAppEndpointsProductApiUpdateProductStatusErrors[keyof ScapiAppEndpointsProductApiUpdateProductStatusErrors];

export type ScapiAppEndpointsProductApiUpdateProductStatusResponses = {
    /**
     * OK
     */
    200: UpdateProductStatusResponseSchema;
};

export type ScapiAppEndpointsProductApiUpdateProductStatusResponse = ScapiAppEndpointsProductApiUpdateProductStatusResponses[keyof ScapiAppEndpointsProductApiUpdateProductStatusResponses];

export type ScapiAppEndpointsProductApiUpdateStockData = {
    body: UpdateStockSchema;
    path?: never;
    query?: never;
    url: '/api/v1/products/stocks';
};

export type ScapiAppEndpointsProductApiUpdateStockErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsProductApiUpdateStockError = ScapiAppEndpointsProductApiUpdateStockErrors[keyof ScapiAppEndpointsProductApiUpdateStockErrors];

export type ScapiAppEndpointsProductApiUpdateStockResponses = {
    /**
     * OK
     */
    200: UpdateStockResponseSchema;
};

export type ScapiAppEndpointsProductApiUpdateStockResponse = ScapiAppEndpointsProductApiUpdateStockResponses[keyof ScapiAppEndpointsProductApiUpdateStockResponses];

export type ScapiAppEndpointsProductApiUpdatePriceData = {
    body: UpdatePriceSchema;
    path?: never;
    query?: never;
    url: '/api/v1/products/prices';
};

export type ScapiAppEndpointsProductApiUpdatePriceErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsProductApiUpdatePriceError = ScapiAppEndpointsProductApiUpdatePriceErrors[keyof ScapiAppEndpointsProductApiUpdatePriceErrors];

export type ScapiAppEndpointsProductApiUpdatePriceResponses = {
    /**
     * OK
     */
    200: UpdatePriceResponseSchema;
};

export type ScapiAppEndpointsProductApiUpdatePriceResponse = ScapiAppEndpointsProductApiUpdatePriceResponses[keyof ScapiAppEndpointsProductApiUpdatePriceResponses];

export type ScapiAppEndpointsCategoryApiListCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Query
         * Search term to filter items by path name
         */
        query?: string | null;
        /**
         * Parent Category
         * Filter items by parent category ID
         */
        parent_category?: number | null;
        /**
         * Page
         * Page number to retrieve items from
         */
        page?: number;
        /**
         * Per Page
         * Number of items per page
         */
        per_page?: number;
    };
    url: '/api/v1/categories/';
};

export type ScapiAppEndpointsCategoryApiListCategoriesErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsCategoryApiListCategoriesError = ScapiAppEndpointsCategoryApiListCategoriesErrors[keyof ScapiAppEndpointsCategoryApiListCategoriesErrors];

export type ScapiAppEndpointsCategoryApiListCategoriesResponses = {
    /**
     * OK
     */
    200: GetCategoriesResponseSchema;
};

export type ScapiAppEndpointsCategoryApiListCategoriesResponse = ScapiAppEndpointsCategoryApiListCategoriesResponses[keyof ScapiAppEndpointsCategoryApiListCategoriesResponses];

export type ScapiAppEndpointsCategoryApiListAttributeGroupsData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/api/v1/categories/{category_id}/attribute-groups';
};

export type ScapiAppEndpointsCategoryApiListAttributeGroupsResponses = {
    /**
     * Response
     * OK
     */
    200: Array<AttributeGroupSchema>;
};

export type ScapiAppEndpointsCategoryApiListAttributeGroupsResponse = ScapiAppEndpointsCategoryApiListAttributeGroupsResponses[keyof ScapiAppEndpointsCategoryApiListAttributeGroupsResponses];

export type ScapiAppEndpointsResultApiGetProductBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/products';
};

export type ScapiAppEndpointsResultApiGetProductBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetProductBatchResultsError = ScapiAppEndpointsResultApiGetProductBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetProductBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetProductBatchResultsResponses = {
    /**
     * OK
     */
    200: UpsertProductBatchResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetProductBatchResultsResponse = ScapiAppEndpointsResultApiGetProductBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetProductBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/status';
};

export type ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsError = ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsResponses = {
    /**
     * OK
     */
    200: UpdateProductStatusBatchResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsResponse = ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetProductStatusUpdateBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetStockBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/stocks';
};

export type ScapiAppEndpointsResultApiGetStockBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetStockBatchResultsError = ScapiAppEndpointsResultApiGetStockBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetStockBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetStockBatchResultsResponses = {
    /**
     * OK
     */
    200: StockBatchResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetStockBatchResultsResponse = ScapiAppEndpointsResultApiGetStockBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetStockBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetPriceBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/prices';
};

export type ScapiAppEndpointsResultApiGetPriceBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetPriceBatchResultsError = ScapiAppEndpointsResultApiGetPriceBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetPriceBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetPriceBatchResultsResponses = {
    /**
     * OK
     */
    200: PriceBatchResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetPriceBatchResultsResponse = ScapiAppEndpointsResultApiGetPriceBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetPriceBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetCancelOrderBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/cancel-orders';
};

export type ScapiAppEndpointsResultApiGetCancelOrderBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetCancelOrderBatchResultsError = ScapiAppEndpointsResultApiGetCancelOrderBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetCancelOrderBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetCancelOrderBatchResultsResponses = {
    /**
     * OK
     */
    200: CancelOrderResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetCancelOrderBatchResultsResponse = ScapiAppEndpointsResultApiGetCancelOrderBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetCancelOrderBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetReturnOrderBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/return-orders';
};

export type ScapiAppEndpointsResultApiGetReturnOrderBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetReturnOrderBatchResultsError = ScapiAppEndpointsResultApiGetReturnOrderBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetReturnOrderBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetReturnOrderBatchResultsResponses = {
    /**
     * OK
     */
    200: ReturnResultsSchema;
};

export type ScapiAppEndpointsResultApiGetReturnOrderBatchResultsResponse = ScapiAppEndpointsResultApiGetReturnOrderBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetReturnOrderBatchResultsResponses];

export type ScapiAppEndpointsResultApiGetShipOrderBatchResultsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Batch Request Id
         */
        batch_request_id: string;
    };
    url: '/api/v1/results/ship-orders';
};

export type ScapiAppEndpointsResultApiGetShipOrderBatchResultsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Not Found
     */
    404: BadRequestSchema;
};

export type ScapiAppEndpointsResultApiGetShipOrderBatchResultsError = ScapiAppEndpointsResultApiGetShipOrderBatchResultsErrors[keyof ScapiAppEndpointsResultApiGetShipOrderBatchResultsErrors];

export type ScapiAppEndpointsResultApiGetShipOrderBatchResultsResponses = {
    /**
     * OK
     */
    200: ShipmentOrderResultsResponseSchema;
};

export type ScapiAppEndpointsResultApiGetShipOrderBatchResultsResponse = ScapiAppEndpointsResultApiGetShipOrderBatchResultsResponses[keyof ScapiAppEndpointsResultApiGetShipOrderBatchResultsResponses];

export type ScapiAppEndpointsOrderApiGetOrdersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Order number
         * Order number to search for
         */
        order_number?: string | null;
        /**
         * Customer key
         * Customer key to search for
         */
        customer_key?: string | null;
        /**
         * Carrier Key
         * Carrier of the order to filter by. Choose from: "DHL_STD_NATIONAL", "HERMES_KLV", "HERMES_STD_NATIONAL", "DHL_AUT", "DHL_POST_AUT", "HERMES_POST_AUT", "POST_CH", "QUICK_CH", "POST_NL", "DHL_NL", "DHL_PL", "PPL", "ZASIL_CZ", "BPOST_BE", "DHL_BPOST_BEL", "COLI_FR", "UB_GLS_DK", "UB_CORR_ES", "DS_TB_ES", "UB_CTT_PT", "DS_TB_PT", "ECONT_BG", "ACS_CY", "UB_OMNIVA_EE", "UB_POST_FI", "UB_TAXY_GR", "ACS_GR", "POST_HR", "POST_HU", "GLS_HU", "UB_FAST_IE", "POST_IT", "DS_TB_IT", "UB_OMNIVA_LT", "BPOST_LU", "UB_OMNIVA_LV", "UB_POST_NO", "FAN_RO", "UB_DHL_SE", "POST_SI", "POST_SK", "ZASIL_SK".
         */
        carrier_key?: Carrier | null;
        /**
         * Shop country
         * Shop country to search for
         */
        shop_country?: string | null;
        /**
         * Status
         * Status of the order to filter by. Choose from: "open", "shipped", "cancelled", "returned", "mixed".
         */
        order_status?: OrdersAppModelsOrderOrderStatusChoices | null;
        /**
         * Status of the order item to filter by. Choose from: "open", "shipped", "cancelled", "returned".
         */
        order_item_status?: OrdersAppModelsOrderItemOrderItemStatusChoices | null;
        /**
         * Orders from
         * Orders from date to filter by
         */
        orders_from?: string | null;
        /**
         * Orders to
         * Orders to date to filter by
         */
        orders_to?: string | null;
        /**
         * Page
         * Page number to retrieve items from
         */
        page?: number;
        /**
         * Per Page
         * Number of items per page
         */
        per_page?: number;
    };
    url: '/api/v1/orders/';
};

export type ScapiAppEndpointsOrderApiGetOrdersErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsOrderApiGetOrdersError = ScapiAppEndpointsOrderApiGetOrdersErrors[keyof ScapiAppEndpointsOrderApiGetOrdersErrors];

export type ScapiAppEndpointsOrderApiGetOrdersResponses = {
    /**
     * OK
     */
    200: PagedGetOrderSchema;
};

export type ScapiAppEndpointsOrderApiGetOrdersResponse = ScapiAppEndpointsOrderApiGetOrdersResponses[keyof ScapiAppEndpointsOrderApiGetOrdersResponses];

export type ScapiAppEndpointsOrderApiGetDeliveryDocumentData = {
    body?: never;
    path: {
        /**
         * Order Number
         */
        order_number: string;
    };
    query?: never;
    url: '/api/v1/orders/{order_number}/delivery_document';
};

export type ScapiAppEndpointsOrderApiGetDeliveryDocumentErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
    /**
     * Internal Server Error
     */
    500: BadRequestSchema;
};

export type ScapiAppEndpointsOrderApiGetDeliveryDocumentError = ScapiAppEndpointsOrderApiGetDeliveryDocumentErrors[keyof ScapiAppEndpointsOrderApiGetDeliveryDocumentErrors];

export type ScapiAppEndpointsOrderApiCancelOrderItemsData = {
    body: CancelRequestSchema;
    path?: never;
    query?: never;
    url: '/api/v1/orders/cancel';
};

export type ScapiAppEndpointsOrderApiCancelOrderItemsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsOrderApiCancelOrderItemsError = ScapiAppEndpointsOrderApiCancelOrderItemsErrors[keyof ScapiAppEndpointsOrderApiCancelOrderItemsErrors];

export type ScapiAppEndpointsOrderApiCancelOrderItemsResponses = {
    /**
     * OK
     */
    200: BatchRequestResponseSchema;
};

export type ScapiAppEndpointsOrderApiCancelOrderItemsResponse = ScapiAppEndpointsOrderApiCancelOrderItemsResponses[keyof ScapiAppEndpointsOrderApiCancelOrderItemsResponses];

export type ScapiAppEndpointsOrderApiShipOrderItemsData = {
    body: ShipmentRequestSchema;
    path?: never;
    query?: never;
    url: '/api/v1/orders/ship';
};

export type ScapiAppEndpointsOrderApiShipOrderItemsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsOrderApiShipOrderItemsError = ScapiAppEndpointsOrderApiShipOrderItemsErrors[keyof ScapiAppEndpointsOrderApiShipOrderItemsErrors];

export type ScapiAppEndpointsOrderApiShipOrderItemsResponses = {
    /**
     * OK
     */
    200: BatchRequestResponseSchema;
};

export type ScapiAppEndpointsOrderApiShipOrderItemsResponse = ScapiAppEndpointsOrderApiShipOrderItemsResponses[keyof ScapiAppEndpointsOrderApiShipOrderItemsResponses];

export type ScapiAppEndpointsOrderApiReturnOrderItemsData = {
    body: ReturnRequestSchema;
    path?: never;
    query?: never;
    url: '/api/v1/orders/return';
};

export type ScapiAppEndpointsOrderApiReturnOrderItemsErrors = {
    /**
     * Bad Request
     */
    400: BadRequestSchema;
    /**
     * Unauthorized
     */
    401: BadRequestSchema;
};

export type ScapiAppEndpointsOrderApiReturnOrderItemsError = ScapiAppEndpointsOrderApiReturnOrderItemsErrors[keyof ScapiAppEndpointsOrderApiReturnOrderItemsErrors];

export type ScapiAppEndpointsOrderApiReturnOrderItemsResponses = {
    /**
     * OK
     */
    200: BatchRequestResponseSchema;
};

export type ScapiAppEndpointsOrderApiReturnOrderItemsResponse = ScapiAppEndpointsOrderApiReturnOrderItemsResponses[keyof ScapiAppEndpointsOrderApiReturnOrderItemsResponses];

export type ClientOptions = {
    baseURL: string;
};